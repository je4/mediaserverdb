// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: dbcontroller.proto

package mediaserverdbproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DBController_CreateItem_FullMethodName = "/mediaserverdbproto.DBController/CreateItem"
)

// DBControllerClient is the client API for DBController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBControllerClient interface {
	CreateItem(ctx context.Context, in *NewItem, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type dBControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDBControllerClient(cc grpc.ClientConnInterface) DBControllerClient {
	return &dBControllerClient{cc}
}

func (c *dBControllerClient) CreateItem(ctx context.Context, in *NewItem, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DBController_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBControllerServer is the server API for DBController service.
// All implementations must embed UnimplementedDBControllerServer
// for forward compatibility
type DBControllerServer interface {
	CreateItem(context.Context, *NewItem) (*DefaultResponse, error)
	mustEmbedUnimplementedDBControllerServer()
}

// UnimplementedDBControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDBControllerServer struct {
}

func (UnimplementedDBControllerServer) CreateItem(context.Context, *NewItem) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedDBControllerServer) mustEmbedUnimplementedDBControllerServer() {}

// UnsafeDBControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBControllerServer will
// result in compilation errors.
type UnsafeDBControllerServer interface {
	mustEmbedUnimplementedDBControllerServer()
}

func RegisterDBControllerServer(s grpc.ServiceRegistrar, srv DBControllerServer) {
	s.RegisterService(&DBController_ServiceDesc, srv)
}

func _DBController_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBControllerServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBController_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBControllerServer).CreateItem(ctx, req.(*NewItem))
	}
	return interceptor(ctx, in, info, handler)
}

// DBController_ServiceDesc is the grpc.ServiceDesc for DBController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserverdbproto.DBController",
	HandlerType: (*DBControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _DBController_CreateItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbcontroller.proto",
}
